{"version":3,"sources":["assets/spinner.gif","components/Navbar.jsx","contexts/ContextProvider.jsx","components/Spinner.jsx","components/tracks/Track.jsx","components/tracks/Tracks.jsx","components/Search.jsx","components/Index.jsx","components/tracks/Lyrics.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","GlobalContext","createContext","track","trackList","isLoading","heading","setHeading","setIsLoading","ContextProvider","children","useState","setTrack","Provider","value","Spinner","src","Loader","alt","style","display","width","margin","Track","artist_name","track_name","album_name","to","track_id","Tracks","useContext","useEffect","a","axios","get","process","response","data","message","body","track_list","console","log","fetchTracks","map","key","Search","trackTitle","setTrackTitle","findTrack","e","preventDefault","onSubmit","type","placeholder","name","onChange","target","Index","Lyrics","lyrics","setLyrics","loading","setLoading","id","useParams","response2","fetchLyrics","lyrics_body","track_rating","primary_genres","music_genre_list","length","genre_list","index","music_genre","music_genre_name","explicit","format","updated_time","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ae4d7011.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react';\nconst Navbar = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark mb-5\">\n            <span className=\"navbar-brand mx-auto mb-0 h1\">\n                LyricsFinder\n            </span>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React, { createContext } from 'react';\nimport { useState } from 'react';\n\nexport const GlobalContext= createContext({\n    track:{trackList:[],isLoading:true},\n    heading: \"\",\n    isLoading: true,\n    setHeading:()=>{},\n    setIsLoading:()=>{}\n});\n\nconst ContextProvider = ({children}) => {\n\n    const [track, setTrack] = useState({trackList:[],isLoading:true});\n    const [heading,setHeading]= useState(\"Top 20 Tracks\");\n\n    return (\n        <GlobalContext.Provider value={{track,heading,setTrack,setHeading}}> \n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport default ContextProvider;","import React from \"react\";\nimport Loader from \"../assets/spinner.gif\";\nconst Spinner = () => {\n    return (\n        <img\n            src={Loader}\n            alt=\"Loading...\"\n            style={{ display: \"block\", width: \"20%\", margin: \"30vh auto\" }}\n        />\n    );\n};\n\nexport default Spinner;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Track = ({track}) => {\n    return (\n        <div className=\"col-md-6\">\n            <div className=\"card mb-4 shadow-sm\">\n                <div className=\"card-body\">\n                    <h5>{track.artist_name}</h5>\n                    <p className=\"card-text\">\n                        <span className=\"mb-2 d-block\">\n                            <span className=\"text-bold\"><i className=\"fas fa-play\"></i> Track</span> :\n                            &nbsp;{track.track_name}\n                        </span>\n                        <span className=\"mb-2 d-block\">\n                            <span className=\"text-bold\"><i className=\"fas fa-compact-disc\"></i> Album</span> :\n                            &nbsp;{track.album_name}\n                        </span>\n                    </p>\n                    <Link to={`lyrics/track/${track.track_id}`} className=\"btn btn-dark btn-block\">\n                        <i className=\"fas fa-chevron-right\"></i> View Lyrics\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Track;","import React, { useContext,useEffect, Fragment } from \"react\";\nimport { GlobalContext } from \"../../contexts/ContextProvider\";\nimport axios from \"axios\";\nimport Spinner from \"../Spinner\";\nimport Track from \"./Track\";\n\nconst Tracks = () => {\n    const {track,setTrack,heading,setHeading } = useContext(GlobalContext);\n    const {trackList,isLoading}= track;\n\n    useEffect(() => {\n        setHeading(\"Top 20 Viral Tracks\");\n        const fetchTracks = async () => {\n            try {\n                let response = await axios.get(\n                    `https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/chart.tracks.get?chart_name=top&page=1&page_size=20&country=in&f_has_lyrics=1&apikey=${process.env.REACT_APP_MM_KEY}`\n                );\n                setTrack({trackList:response.data.message.body.track_list,isLoading:false})\n            } catch (error) {\n                console.log(error.response);\n            }\n            \n        };\n        fetchTracks();\n    }, [setHeading,setTrack]);\n    \n    return isLoading? (<Spinner />):(\n        <Fragment>\n            <h3 className=\"text-center mb-4\">\n                {heading}\n            </h3>\n            <div className=\"row\">\n            {\n                trackList.map(({track})=>(\n                    <Track key={track.track_id} track={track}/>\n                ))\n            }\n            </div>\n        </Fragment>\n    )\n};\n\nexport default Tracks;\n","import React, { useContext } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { GlobalContext } from \"../contexts/ContextProvider\";\n\nconst Search = () => {\n    const [trackTitle, setTrackTitle] = useState(\"\");\n    const {setHeading,setTrack}= useContext(GlobalContext);\n\n    const findTrack=async (e)=>{\n        e.preventDefault();\n        \n        try {\n            let response = await axios.get(\n                `https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/track.search?\n                q_track=${trackTitle}&page_size=20&page=1&s_track_rating=desc&apikey=${process.env.REACT_APP_MM_KEY}`\n            );\n            setHeading(\"Search Results\");\n            setTrack({trackList:response.data.message.body.track_list,isLoading:false});\n            setTrackTitle(\"\");\n        } catch (error) {\n            console.log(error.response);\n        }\n    }\n\n    return (\n        <div className=\"card card-body mb-4 p-4\">\n            <h1 className=\"display-4 text-center\">\n                <i className=\"fas fa-music\"></i> Search For a Song\n            </h1>\n            <p className=\"lead text-center\">Get the lyrics for any Song</p>\n            <form onSubmit={findTrack}>\n                <div className=\"form-group\">\n                    <input\n                        type=\"search\"\n                        className=\"form-control form-control-lg\"\n                        placeholder=\"Song Title...\"\n                        value={trackTitle}\n                        name=\"trackTitle\"\n                        onChange={(e) => setTrackTitle(e.target.value)}\n                    />\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary btn-lg btn-block mb-4\">Get Track Lyrics</button>\n            </form>\n        </div>\n    );\n};\n\nexport default Search;\n","import React, { Fragment } from 'react';\nimport Tracks from './tracks/Tracks';\nimport Search from './Search';\n\nconst Index = () => {\n\n    return (\n        <Fragment>\n            <Search />\n            <Tracks />\n        </Fragment>\n    );\n};\n\nexport default Index;","import React, { useState, useEffect, Fragment } from \"react\";\nimport axios from \"axios\";\nimport { useParams, Link } from \"react-router-dom\";\nimport Spinner from \"../Spinner\";\nimport Moment from \"react-moment\";\n\nconst Lyrics = () => {\n    const [lyrics, setLyrics] = useState({});\n    const [track, setTrack] = useState({});\n    const [loading, setLoading] = useState(true);\n    const { id } = useParams();\n    useEffect(() => {\n        const fetchLyrics = async () => {\n            try {\n                let response = await axios.get(\n                    `https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/track.lyrics.get?track_id=${id}&apikey=${process.env.REACT_APP_MM_KEY}`\n                );\n                setLyrics(response.data.message.body.lyrics);\n                let response2 = await axios.get(\n                    `https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/track.get?track_id=${id}&apikey=${process.env.REACT_APP_MM_KEY}`\n                );\n                setTrack(response2.data.message.body.track);\n                setLoading(false);\n            } catch (error) {\n                console.log(error.response);\n            }\n        };\n        fetchLyrics();\n    }, [id]);\n\n    return loading ? (\n        <Spinner />\n    ) : (\n        <Fragment>\n            <Link to=\"/\" className=\"btn btn-sm btn-dark mb-4\">\n                Go Back\n            </Link>\n            <div className=\"card\">\n                <h5 className=\"card-header\">\n                    {track.track_name} by&nbsp;\n                    <span className=\"text-secondary\">{track.artist_name}</span>\n                </h5>\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{lyrics.lyrics_body}</p>\n                </div>\n                <ul className=\"list-group list-group-flush mt-3\">\n                    <li className=\"list-group-item\">\n                        <strong>Album Name</strong> : {track.album_name}\n                    </li>\n                    <li className=\"list-group-item\">\n                        <strong>Track Rating</strong> : {track.track_rating}/100\n                    </li>\n                    <li className=\"list-group-item\">\n                        <strong>Song Genre</strong> :\n                        {track.primary_genres.music_genre_list.length ===0 ? \n                            \"NO GENRE AVAILABLE\" \n                        : \n                        track.primary_genres.music_genre_list.map((genre_list,index)=>(<span key={index}>&nbsp;{genre_list.music_genre.music_genre_name}&nbsp;|</span>))}\n                    </li>\n                    <li className=\"list-group-item\">\n                        <strong>Explicit Words</strong> : {track.explicit === 0 ? \"No\" : \"Yes\"}\n                    </li>\n                    <li className=\"list-group-item\">\n                        <strong>Release Date</strong> : <Moment format=\"DD-MM-YYYY\">{track.updated_time}</Moment>\n                    </li>\n                </ul>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default Lyrics;\n","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Index from \"./components/Index\";\nimport ContextProvider from \"./contexts/ContextProvider\";\nimport Lyrics from \"./components/tracks/Lyrics\";\nconst App = () => {\n    return (\n        <ContextProvider>\n            <Router basename={process.env.PUBLIC_URL}>  {/* Use this URL as base URL */}\n                <Fragment>\n                    <Navbar />\n                    <div className=\"container\">\n                        <Switch>\n                            <Route exact path=\"/\" component={Index} />\n                            <Route exact path=\"/lyrics/track/:id\" component={Lyrics} />\n                        </Switch>\n                    </div>\n                </Fragment>\n            </Router>\n        </ContextProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}